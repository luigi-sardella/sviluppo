with Ada.Text_IO; use Ada.Text_IO;
with Ada.Numerics; use Ada.Numerics;
with LS.Utili; use LS.Utili;
with LS.Numerico; use LS.Numerico;
with LS.Float_IO; use LS.Float_IO;
with LS.Funzioni_Elementari; use LS.Funzioni_Elementari;
with GNAT.Regpat;
with Ada.Command_Line;
with Ada.Numerics.Generic_Complex_Types;
-- Filtro passabanda del ricevitore a reazione
procedure Passabanda  is
   package Complex_Types is new Ada.Numerics.Generic_Complex_Types(Mio_Float);
   use Complex_Types;
   L1, L2, L3, C1, C2, C3, C4, C5, R1, R2, R_Serie, F_Ini, F_Fin : Mio_Float := 0.0;
   Dati : String := Ada.Command_Line.Argument(1);
   Num_Freq : Positive;
   Numero_Pos : String := "(\s+\d*)";
   Numero_Dec : String := "(\s+[+-]?\d*\.\d*[eE]?[+-]?\d*)";
   L1_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "L1" & Numero_Dec, GNAT.Regpat.Case_Insensitive);
   L2_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "L2" & Numero_Dec, GNAT.Regpat.Case_Insensitive);
   L3_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "L3" & Numero_Dec, GNAT.Regpat.Case_Insensitive);
   C1_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "C1" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   C2_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "C2" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   C3_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "C3" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   C4_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "C4" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   C5_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "C5" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   R1_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "R1" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   R2_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "R2" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   R_Serie_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "R_serie" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   F_Ini_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "F_Ini" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   F_Fin_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "F_Fin" & Numero_Dec, GNAT.Regpat.Case_Insensitive);   
   Num_Freq_Match : GNAT.Regpat.Pattern_Matcher := GNAT.Regpat.Compile( "Num_Freq" & Numero_Pos, GNAT.Regpat.Case_Insensitive);   
   Risult : GNAT.Regpat.Match_Array(0..3);
begin
   GNAT.Regpat.Match(L1_Match, Dati, Risult); 
   L1 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E-6;   
   GNAT.Regpat.Match(L2_Match, Dati, Risult); 
   L2 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E-6;   
   GNAT.Regpat.Match(L3_Match, Dati, Risult); 
   L3 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E-6;   
   GNAT.Regpat.Match(C1_Match, Dati, Risult); 
   C1 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E-12;   
   GNAT.Regpat.Match(C2_Match, Dati, Risult); 
   C2 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E-12;   
   GNAT.Regpat.Match(C3_Match, Dati, Risult); 
   C3 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E-12;   
   GNAT.Regpat.Match(C4_Match, Dati, Risult); 
   C4 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E-12;   
   GNAT.Regpat.Match(C5_Match, Dati, Risult); 
   C5 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E-12;   
   GNAT.Regpat.Match(R1_Match, Dati, Risult); 
   R1 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last));   
   GNAT.Regpat.Match(R2_Match, Dati, Risult); 
   R2 := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last));   
   GNAT.Regpat.Match(R_Serie_Match, Dati, Risult); 
   R_Serie := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last));   
   GNAT.Regpat.Match(F_Ini_Match, Dati, Risult); 
   F_Ini := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E6;   
   GNAT.Regpat.Match(F_Fin_Match, Dati, Risult); 
   F_Fin := Mio_Float'Value(Dati(Risult(1).First..Risult(1).Last)) * 1.0E6;   
   GNAT.Regpat.Match(Num_Freq_Match, Dati, Risult); 
   Num_Freq := Positive'Value(Dati(Risult(1).First..Risult(1).Last));   
   declare
      XL1, XL2, XL3, XC1, XC2, XC3, XC4, XC5 : Complex;
      I1, I2, I3, I4, I5, I6, I7, I8, I9 : Complex;
      V1, V2, V3, V4, V5, V6 : Complex;
      Frequenze : Vettore(1..Num_Freq);
      Moduli : Vettore(1..Num_Freq);
      Fasi : Vettore(1..Num_Freq);
      Delta_Omega : Mio_Float := 2.0*Pi*(F_Fin - F_Ini)/Mio_Float(Num_Freq - 1);
      Omega : Mio_Float := 2.0*Pi*F_Ini - Delta_Omega;
   begin
      V1 := 1.0 + 0.0*J;
      for K in 1..Num_Freq loop
	 Omega := Omega + Delta_Omega;
	 Frequenze(K) := Omega/(2.0*Pi);
	 XC1 := 0.0 - J/(Omega*C1);
	 XC2 := 0.0 - J/(Omega*C2);
	 XC3 := 0.0 - J/(Omega*C3);
	 XC4 := 0.0 - J/(Omega*C4);
	 XC5 := 0.0 - J/(Omega*C5);
	 XL1 := R_Serie + J*Omega*L1;
	 XL2 := R_Serie + J*Omega*L2;
	 XL3 := R_Serie + J*Omega*L3;
	 I1 := V1/R1;
	 V2 := V1 + I1*XC1;
	 I2 := V2/XL1;
	 I3 := I2 + I1;
	 V3 := V2 + I3*XC2;
	 I4 := V3/XC3;
         I5 := I4 + I3;
	 V4 := V3 + I5*XL2;
	 I6 := V4/XC4;
	 I7 := I6 + I5;
	 V5 := V4 + I7*XL3;
	 I8 := V5/XC5;
	 I9 := I8 + I7;
	 V6 := V5 + I9*R2;
	 Moduli(K) := 10.0*Log( ((abs(V1))**2/R1) / ((abs(V6))**2/R2) , 10.0);
	 Fasi(K) := (180.0/Pi)*Arctan(Im(V1/V6), Re(V1/V6));
      end loop;
      Stampa_Curve(Frequenze, Moduli, "moduli.plt", Gnplt => nognuplot);
      Stampa_Curve(Frequenze, Moduli, "moduli");
      Stampa_Curve(Frequenze, fasi, "fasi");
   end;
end Passabanda;
