with Ada.Strings.Fixed; use Ada.Strings.Fixed;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with Ada.Numerics; use Ada.Numerics;
with LS.Numerico; use LS.Numerico;
with LS.Funzioni_Elementari; use LS.Funzioni_Elementari;
with LS.Utili; use LS.Utili;
with LS.Interpolazione_Curve;
package LS.Curve_Termocompressori is
   package Interpolaz is new LS.Interpolazione_Curve(Num_Curve => 17, Num_Punti => 50);
   package Correz_PM is new LS.Interpolazione_Curve(Num_Curve => 2, Num_Punti => 22); 
   Dati_Koerting : Interpolaz.Dati_Curve := (  
                                ( 0.95, (
                                         (1.003,5.0),(1.004,4.0),(1.005,3.6),(1.007,2.4),(1.01,1.7),(1.015,0.95),(1.02,0.55),
					 (1.025,0.32),(1.0275,0.22),(1.03,0.13),(1.031,0.1), others=> (others => 0.0))),
                                ( 0.9, (
                                        (1.007,5.0),(1.009,4.0),(1.01,3.4),(1.015,2.35),(1.02,1.7),(1.025,1.3),(1.03,1.0),
					(1.035,0.75),(1.04,0.6),(1.045,0.46),(1.05,0.33),(1.055,0.22),(1.06,0.16),(1.062,0.1), 
					others=> (others => 0.0))),
                                ( 0.8, (
                                        (1.015,5.0),(1.02,3.8),(1.025,3.0),(1.03,2.5),(1.04,1.85),(1.045,1.6),(1.06,1.1),
                                        (1.07,0.85),(1.09,0.55),(1.1,0.42),(1.12,0.25),(1.14,0.13),(1.145,0.1), 
					others=> (others => 0.0))),
                                ( 0.7, (
                                        (1.02,5.0),(1.03,3.7),(1.04,2.9),(1.05,2.37),(1.06,1.95),(1.08,1.4),(1.1,1.05),
                                        (1.12,0.8),(1.14,0.6),(1.16,0.46),(1.18,0.34),(1.2,0.24),(1.24,0.1), 
					others=> (others => 0.0))),
                                ( 0.6, (
                                        (1.032,5.0),(1.04,4.1),(1.05,3.33),(1.07,2.4),(1.1,1.7),(1.14,1.12),(1.2,0.65),
                                        (1.25,0.42),(1.3,0.26),(1.35,0.14),(1.37,0.1), others=> (others => 0.0))),
                                ( 0.5, (
                                        (1.043,5.0),(1.055,4.0),(1.075,3.0),(1.12,1.95),(1.16,1.4),(1.2,1.1),(1.25,0.8),
                                        (1.3,0.6),(1.35,0.44),(1.4,0.32),(1.47,0.2),(1.5,0.15),(1.54,0.1), 
					others=> (others => 0.0))),
                                ( 0.4, (
                                        ( 1.05,5.0),(1.1,3.0),(1.2,1.55),(1.29,1.0),(1.35,0.8),(1.4,0.65),(1.5,0.43),
                                        (1.6,0.29),(1.7,0.175),(1.8,0.1), others=> (others => 0.0))),
                               ( 0.3, (
                                      (1.07,5.0),(1.1,3.8),(1.2,2.1),(1.25,1.7),(1.3,1.4),(1.35,1.2),
                                      (1.4,1.0),(1.45,0.87),(1.5,0.77),(1.6,0.6),(1.7,0.45),
                                      (1.8,0.33),(1.9,0.25),(2.0,0.19),(2.2,0.1), others => (others => 0.0))),
                              ( 0.2, (
                                      (1.09,5.0),(1.2,2.8),(1.3,1.9),(1.35,1.7),(1.4,1.5),(1.45,1.3),(1.5,1.18),
                                      (1.57,1.0),(1.6,0.95),(1.7,0.78),(1.8,0.62),(1.9,0.51),
                                      (2.0,0.43),(2.1,0.35),(2.2,0.3),(2.3,0.24),(2.4,0.19),
                                      (2.5,0.16),(2.6,0.13),(2.7,0.1), others => (others => 0.0))),
                              ( 0.1, (
                                      (1.13,5.0),(1.3,2.7),(1.35,2.4),(1.4,2.1),(1.45,1.9),(1.5,1.7),(1.6,1.4),(1.7,1.2),
                                      (1.8,1.0),(1.9,0.88),(2.0,0.75),(2.1,0.65),(2.2,0.58),(2.3,0.5),
                                      (2.4,0.45),(2.5,0.4),(2.6,0.35),(2.7,0.31),(2.8,0.28),(2.9,0.25),
                                      (3.0,0.22),(3.2,0.17),(3.4,0.13),(3.6,0.1), others => (others => 0.0))),
                              (0.08, (
                                      (1.15,5.0),(1.3,3.0),(1.4,2.4),(1.5,2.0),(1.6,1.7),(1.7,1.5),(1.8,1.3),
                                      (2.0,1.0),(2.1,0.9),(2.2,0.8),(2.3,0.72),(2.4,0.65),
                                      (2.5,0.58),(2.6,0.53),(2.7,0.48),(2.8,0.44),(2.9,0.4),
                                      (3.0,0.36),(3.2,0.31),(3.4,0.26),(3.6,0.23),(3.8,0.2),
                                      (4.0,0.17),(4.2,0.14),(4.4,0.12),(4.6,0.1), others => (others => 0.0))),
                              (0.06, (
                                      (1.155,5.0),(1.3,3.1),(1.4,2.5),(1.5,2.1),(1.6,1.8),
				      (1.7,1.6),(1.8,1.4),(1.9,1.25),(2.0,1.15),
                                      (2.15,1.0),(2.3,0.86),(2.4,0.78),(2.5,0.71),(2.6,0.65),
                                      (2.7,0.6),(2.8,0.55),(2.9,0.5),(3.0,0.47),(3.2,0.4),
                                      (3.4,0.36),(3.6,0.32),(3.8,0.28),(4.0,0.25),(4.2,0.22),
                                      (4.4,0.19),(4.6,0.16),(4.8,0.13),(5.0,0.11), others => (others => 0.0))),
                              (0.05, (
                                      (1.16,5.0),(1.3,3.2),(1.4,2.6),(1.5,2.25),(1.62,1.85),(1.8,1.5),(1.9,1.3),(2.22,1.0), 
                                      (2.3,0.93),(2.5,0.78),(2.6,0.71),(2.7,0.655),(2.8,0.6),
                                      (2.9,0.555),(3.0,0.52),(3.2,0.45),(3.4,0.405),(3.6,0.365),(3.8,0.325),(4.0,0.29),
                                      (4.2,0.26),(4.4,0.23),(4.6,0.2),(4.8,0.173),(5.0,0.15),(5.5,0.1), 
				      others=> (others => 0.0))),
                              (0.04, (
                                      (1.2,5.0),(1.4,3.0),(1.5,2.4),(1.6,2.1),(1.7,1.8),(1.8,1.6),(1.9,1.4),(2.0,1.3),
                                      (2.3,1.0),(2.4,0.9),(2.5,0.85),(2.6,0.77),(2.7,0.71),
                                      (2.8,0.65),(2.9,0.61),(3.0,0.57),(3.2,0.5),(3.4,0.45),
                                      (3.6,0.41),(3.8,0.37),(4.0,0.33),(4.2,0.3),(4.4,0.27),
                                      (4.6,0.24),(4.8,0.217),(5.0,0.19),(5.5,0.135),(6.0,0.1), others => (others => 0.0))),
                              (0.02, (
                                      (1.23,5.0),(1.4,3.2),(1.5,2.6),(1.6,2.3),(1.7,2.0),(1.8,1.8),(1.9,1.6),
				      (2.0,1.45),(2.1,1.3),(2.2,1.2),(2.3,1.1),
                                      (2.45,1.0),(2.5,0.97),(2.6,0.9),(2.7,0.85),(2.8,0.8),
                                      (2.9,0.75),(3.0,0.72),(3.2,0.65),(3.4,0.6),(3.6,0.55),
                                      (3.8,0.51),(4.0,0.48),(4.2,0.44),(4.4,0.41),(4.6,0.38),
                                      (4.8,0.36),(5.0,0.34),(5.5,0.28),(6.0,0.23),(6.5,0.185),
                                      (7.0,0.135),(7.5,0.1), others => (others => 0.0))),
                              (0.01, (
                                      (1.25,5.0),(1.4,3.4),(1.5,2.8),(1.6,2.5),(1.7,2.2),(1.81,1.9),(1.9,1.75),(2.0,1.6),
                                      (2.09,1.5),(2.2,1.35),(2.3,1.27),(2.4,1.2),(2.5,1.1),(2.6,1.05),
                                      (2.7,1.0),(2.8,0.95),(2.9,0.9),(3.0,0.87),(3.2,0.8),
                                      (3.2,0.8),(3.4,0.74),(3.6,0.68),(3.8,0.64),(4.0,0.595),
                                      (4.2,0.55),(4.4,0.52),(4.6,0.49),(4.8,0.46),(5.0,0.44),
                                      (5.5,0.38),(6.0,0.32),(6.5,0.27),(7.0,0.23),(7.5,0.185),
                                      (8.0,0.15),(8.5,0.12),(9.0,0.1), others => (others => 0.0))),
                              (0.005,(
                                      (1.28,5.0),(1.5,3.2),(1.6,2.8),(1.7,2.4),(1.8,2.2),(1.9,2.0),(2.0,1.8),
				      (2.1,1.65),(2.2,1.5),(2.3,1.4),(2.4,1.3),(2.5,1.2),(2.7,1.1),
                                      (2.9,1.0),(3.0,0.96),(3.2,0.9),(3.4,0.83),(3.6,0.78),
                                      (3.8,0.74),(4.0,0.695),(4.2,0.65),(4.4,0.62),(4.6,0.59),
                                      (4.8,0.56),(5.0,0.53),(5.5,0.47),(6.0,0.4),(6.5,0.345),
                                      (7.0,0.29),(7.5,0.245),(8.0,0.21),(8.5,0.18),(9.0,0.15),
                                      (10.0,0.12), others => (others => 0.0))),
                               others => ( 0.0, ((others => ( others => 0.0)))) );
   Curva_PM : Correz_PM.Curve := ((0.0,0.0),(2.5,0.2),(5.0,0.35),(10.0,0.6),(12.5,0.67),(15.0,0.75),(17.5,0.8),
				  (20.0,0.85),(25.0,0.95),(29.0,1.0),(40.0,1.15),(50.0,1.24),(60.0,1.31),
				  (70.0,1.37),(80.0,1.42),(90.0,1.46),(100.0,1.49),(110.0,1.52),(120.0,1.54),
                                  (125.0,1.55),(142.5,1.6),(150.0,1.61)); 
   -- curva HEI Correz. rapp. aspirazione vs. Peso molecolare
   procedure Rapp_Asp(Ps, Pd, Ptr : in Mio_Float; Rapporto : out Mio_Float; Estrapol : out Boolean);   
   function Correzione_PM(PM : Mio_Float) return Mio_Float;
   function Corr_Temp_Vap(Temperatura : Mio_Float) return Mio_Float;
   function Corr_Temp_Inc(Temperatura : Mio_Float) return Mio_Float;
end LS.Curve_Termocompressori;
package body LS.Curve_Termocompressori is
   procedure Rapp_Asp(Ps, Pd, Ptr : in Mio_Float; Rapporto : out Mio_Float; Estrapol : out Boolean) is
      Pdps : Mio_Float := Pd/Ps;
      Psptr : Mio_Float := Ps/Ptr;
   begin
      Interpolaz.Interpola_Curve(Dati => Dati_Koerting, Ascissa => Pdps, Valore_Curva => Psptr, 
				 Risult => Rapporto, Estrap => Estrapol);
   end Rapp_Asp;
   function Correzione_PM(PM : Mio_Float) return Mio_Float is -- correzione per il peso molecolare
      Corr_PM : Mio_Float;
      Estrap : Boolean;
   begin  -- curve HEI
      Correz_PM.Interpola(Curva_PM, PM, Corr_PM, Estrap);
      return Corr_PM;
   end Correzione_PM;
   function Corr_Temp_Vap(Temperatura : Mio_Float) return Mio_Float is
   begin -- curve HEI
      return 1.014 - 5.935E-4*Temperatura;
   end Corr_Temp_Vap;
   function Corr_Temp_Inc(Temperatura : Mio_Float) return Mio_Float is
   begin -- curve HEI
      return 1.010 - 4.2811E-4*Temperatura;
   end Corr_Temp_Inc;
end LS.Curve_Termocompressori;   
